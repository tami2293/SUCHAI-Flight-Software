#!/usr/bin/env python
# encoding: utf-8

import os
import time

APPNAME = 'a3200-std'
VERSION = time.strftime("%Y.%m", time.gmtime())

top = '.'
out = 'build'

# Scan modules in local lib dir
modules = ['lib/libasf', 'lib/liba3200', 'lib/libutil', 'lib/libcsp', 'lib/libparam']

def options(ctx):
    ctx.load('gcc')
    if os.path.exists('eclipse.py'):
        ctx.load('eclipse')
    ctx.recurse(modules, once=True)

    ctx.add_option('--arch', action='store', default='ucr3fp', help='MCU arch')
    ctx.add_option('--part', action='store', default='uc3c0512c', help='MCU part')
    ctx.add_option('--toolchain', action='store', default='avr32-', help='Set toolchain prefix')

    gr = ctx.add_option_group("A3200 options")
    gr.add_option('--with-console', metavar='HANDLE', default=2, type=int, help='Choose USART[0,1,2,3] for console')

def configure(ctx):
    ctx.env.CC = ctx.options.toolchain + "gcc"
    ctx.env.CXX = ctx.options.toolchain + "g++"
    ctx.env.AR = ctx.options.toolchain + "ar"
    ctx.load('gcc gxx')

    # Locate programs
    ctx.find_program('avr32program', var='AVR32PROGRAM')
    ctx.find_program(ctx.options.toolchain + 'size', var='SIZE')
    ctx.find_program(ctx.options.toolchain + 'objcopy', var='OBJCOPY')
    ctx.find_program("sphinx-build", var="SPHINX_BUILD", mandatory=False)

    # Generate build arguments
    ctx.env.append_unique('CFLAGS',             ['-Wall', '-std=gnu99', '-g', '-O1', '-fno-exceptions', '-ffunction-sections', '-masm-addr-pseudos', '-mpart='+ctx.options.part, '-Wempty-body', '-Wtype-limits', '-Wmissing-parameter-type', '-Wuninitialized'])
    ctx.env.append_unique('CXXFLAGS',           ['-Wall', '-g', '-O2', '-fno-exceptions', '-ffunction-sections', '-masm-addr-pseudos', '-mpart='+ctx.options.part, '-Wempty-body', '-Wtype-limits', '-Wuninitialized'])
    ctx.env.append_unique('ASFLAGS',            ['-xassembler-with-cpp', '-c', '-mpart='+ctx.options.part])

    ctx.env.append_unique('EXCLUDES_NANOMIND',  [])
    ctx.env.append_unique('LINKFLAGS_NANOMIND', ['-mpart='+ctx.options.part, '-Wl,-Map,nanomind.map', '-Wl,--gc-sections', '--rodata-writable', '-Wl,--direct-data'])

    # Add files
    ctx.env.append_unique('FILES_NANOMIND',     ['src/system/*.c', 'src/os/FreeRTOS/*.c', 'src/drivers/nanomind/*.c', 'src/drivers/nanomind/gs-drivers/nanopower2.c', 'src/drivers/nanomind/gs-drivers/gssb.c'])
    ctx.env.PART = ctx.options.part.upper()

    # Linker script
    ctx.env.append_unique('LINKFLAGS_NANOMIND', '-T../lib/liba3200/linkscripts/avr32{0}.lds'.format(ctx.options.part))

    # Options for libutil
    ctx.options.with_log = 'disable'

    # Options for libasf
    ctx.options.with_liba3200 = True
    ctx.options.enable_spi_flash = True
    ctx.options.conf_dir = 'conf/'
    ctx.options.clock = 'tick'
    if not ctx.options.sleep_mode:
        ctx.options.sleep_mode = 'IDLE'

    # Options for liba3200
    ctx.options.enable_param = False
    ctx.options.enable_board_init = False


    # Store configuration options
    ctx.define('USART_CONSOLE', ctx.options.with_console)

    # Save config to header file
    ctx.write_config_header('include/conf_a3200.h', top=True, remove=True)
    ctx.recurse(modules)

def build(ctx):
    ctx(export_includes=['include'], name='include')
    ctx.recurse(modules)
    ctx.program(
        source=ctx.file_path.ant_glob(ctx.env.FILES_NANOMIND, excl=ctx.env.EXCLUDES_NANOMIND),
        target='nanomind.elf',
        includes=['src/drivers/nanomind/include', 'src/drivers/nanomind/gs-drivers/include/', 'src/system/include', 'src/os/include'],
        defines = ctx.env.DEFINES_NANOMIND,
        linkflags = ctx.env.LINKFLAGS_NANOMIND,
        use=['libparam-client', 'asf', 'a3200', 'util', 'csp'],
        lib=['m', 'stdc++'])
    ctx(rule='${OBJCOPY} -O binary -j .text -j .exception -j .data ${SRC} ${TGT}', source='nanomind.elf', target='nanomind.bin', name='objcopy')
    ctx(name="size", rule='${SIZE} --format=berkeley ${SRC}', source='nanomind.elf', always=True)

def program(ctx):
    ctx(name='program', rule='${AVR32PROGRAM} --part ${PART} program -finternal@0x80000000 -cint -F elf -O 0 -e -v -R -r ${SRC}', source='nanomind.elf', always=True)

from waflib.Build import BuildContext
class Program(BuildContext):
    cmd = 'program'
    fun = 'program'

def quickprogram(ctx):
    ctx(name='program', rule='${AVR32PROGRAM} --part ${PART} program -finternal@0x80000000 -cint -F elf -O 0 -e -R -r ${SRC}', source='nanomind.elf', always=True)

from waflib.Build import BuildContext
class QuickProgram(BuildContext):
    cmd = 'quickprogram'
    fun = 'quickprogram'

def udevrules(ctx):
    os.system('sudo cp avrisp.rules /etc/udev/rules.d/60-avrisp.rules')

from waflib.Build import BuildContext
class UdevRules(BuildContext):
    cmd = 'udevrules'
    fun = 'udevrules'

def doc(ctx):
    git_rev = os.popen('git describe --always --dirty=-dirty 2> /dev/null || echo unknown').read().strip()
    ctx(
        cwd    = ctx.file_path.abspath(),
        rule   = 'doxygen doc/a3200-std.doxygen 2>&1 > /dev/null || echo doxygen error',
        source = './doc/a3200-std.doxygen',
        target = './doxygen/xml/index.xml',
    )
    ctx(
        rule   = "${SPHINX_BUILD} -q -c ./doc -b html -D release="+git_rev+" -d build/doc/doctrees . build/doc/html",
        cwd    = ctx.file_path.abspath(),
        source =ctx.file_path.ant_glob('**/*.rst') + [ctx.file_path.make_node('doc/conf.py')] + ['doxygen/xml/index.xml'],
        target = './doc/html/doc/index.html',
    )
    ctx(
        rule   = "${SPHINX_BUILD} -q -c ./doc -b latex -D release="+git_rev+" -d build/doc/doctrees . build/doc/latex",
        cwd    = ctx.file_path.abspath(),
        source =ctx.file_path.ant_glob('**/*.rst') + [ctx.file_path.make_node('doc/conf.py')] + ['doc/html/doc/index.html'],
        target = './doc/latex/a3200-std.tex',
    )
    ctx(
        cwd    = ctx.file_path.abspath(),
        rule   = 'make -C build/doc/latex all-pdf 2>&1 > /dev/null || echo make error',
        source = './doc/latex/a3200-std.tex',
        target = './doc/latex/a3200-std.pdf',
    )

from waflib.Build import BuildContext
class Doc(BuildContext):
   cmd = 'doc'
   fun = 'doc'

def dist(ctx):
    if not ctx.file_path.find_node('build/doc/latex/a3200-std.pdf'):
        ctx.fatal('You forgot to run \'waf doc\' first, we need to include the documentation in the output')

    git_rev = os.popen('git describe --always --dirty=-dirty 2> /dev/null || echo unknown').read().strip()
    ctx.base_name = 'a3200-sdk-lite-' + git_rev
    os.system('cp build/doc/latex/a3200-std.pdf doc/gs-man-nanomind-a3200-sdk-lite-' + git_rev + '.pdf')
    ctx.files     = ctx.file_path.ant_glob(['waf', 'wscript', 'eclipse.py', 'program.py', 'client/*', 'src/*', 'lib/**', 'doc/**', 'CHANGELOG', 'build/nanomind*'])
